type Task @model {
    id: ID @id
    title: String
    contains: [Task] @relationship(type: "CONTAINS", direction: OUT)
    owner: User @relationship(type: "OWNED_BY", direction: OUT)
    done: Boolean @default(value: false)
}

type TaskList @model {
    id: ID @id
    name: String
    tasks: [Task] @relationship(type: "CONTAINS", direction: OUT)
    owner: User @relationship(type: "OWNED_BY", direction: OUT)
}

extend type Task @auth(rules: [{ operations: [CREATE, READ, UPDATE, DELETE], OR : [{roles: ["admin"]}, {bind: { owner:{id: "$jwt.sub" }}, allow: { owner:{id: "$jwt.sub" }}}]}])

extend type TaskList @auth(rules: [{ operations: [CREATE, READ, UPDATE, DELETE], OR : [{roles: ["admin"]}, {bind: { owner:{id: "$jwt.sub" }}, allow: { owner:{id: "$jwt.sub" }}}]}])

type User @model {
    id: ID @id
    username: String!
    password: String! @private
    roles: [String!]
}

extend type User @auth(rules: [{ operations: [CREATE, READ, UPDATE, DELETE], OR: [{ roles: ["admin"] }, { allow: { id: "$jwt.sub" } }] }])

type Mutation {
    signUp(username: String!, password: String!): String! @auth
    signIn(username: String!, password: String!): String! @auth
    createTask(title: String!, owner: ID = "$jwt.sub", done: Boolean = false): Task
    updateTask(id: ID!, title: String, done: Boolean): Task
    deleteTask(id: ID!): Task
}

type Query {
    me: User @auth(rules: [{ allow: ["$jwt.sub"] }])
    myTasks: [Task] @auth(rules: [{ allow: ["$jwt.sub"] }])
    myTaskLists: [TaskList] @auth(rules: [{ allow: ["$jwt.sub"] }])
}
